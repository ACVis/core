/*--------------------------------

	REM Fallback

	Provides a neat way for REM/PX fallback without the need to have redundant CSS in the output

	setup:

	Add "@import "utility/rem";" to top of _variables.scss
	Add "$rems-on: false;" to the top of fixed-width.scss

	example usage:

	$p-large: rem(18px);

	outcome:

	If $rems-on is active, output: $p-large: 1.8rem;
	If $rems-on is inactive, output: $p-large: 18px;

*/

$rems-on: true !default;
$rems-default-unit: 'px' !default;
$rems-base-font-size: 10px !default;

@function rem($size) {

	$unitless: $size / ($size * 0 + 1);
	$unitless-base: $rems-base-font-size / ($rems-base-font-size * 0 + 1);

	@if $rems-on {

		@if str-index(#{$size}, 'px') {

			@return $unitless / $unitless-base * 1rem;

		} @elseif str-index(#{$size}, 'rem') {

			@return $size;

		} @elseif unitless($size) {

			@if $rems-default-unit == 'px' {

				@return $unitless / $unitless-base * 1rem;

			} @elseif $rems-default-unit == 'rem' {

				@return $size * 1rem;

			}

		}

	} @else {

		@if str-index(#{$size}, 'px') {

			@return $size;

		} @elseif str-index(#{$size}, 'rem') {

			@return $unitless * $unitless-base * 1px;

		} @elseif unitless($size) {

			@if $rems-default-unit == 'px' {

				@return $unitless * 1px;

			} @elseif $rems-default-unit == 'rem' {

				@return $unitless * $unitless-base * 1px;

			}

		}

	}

}