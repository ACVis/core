{"version":3,"sources":["styleguide.scss","_variables.scss","utility/_functions.scss","utility/_mixins.scss"],"names":[],"mappings":"AAQA,QAKE,kBACA,gBACA,UACA,uDACA,qBAAa,CATf,eAYG,WACA,kBACA,MACA,UACA,eACA,YACA,+LACA,cAAS,CAnBZ,eAuBG,iBACA,kBACA,uBACA,wBCmLe,CD7MlB,cA8BG,oBEdS,CCeX,wCH/BD,QAkCG,eACA,MACA,WACA,YACA,aACA,gBAAU,CAvCb,eA0CI,YACA,gBACA,sBAAc,CA5ClB,cAgDI,mCAAA,AAAW,+BAAX,AAAW,0BAAA,CAAA,CAhDf,SAsDE,kBACA,SAAS,CAvDX,gBGqE6C,gBAAA,mBACC,sBAAA,sBDtDlC,CFhBZ,cAkEE,cCAiB,CDlEnB,sGA0EG,uCACA,gBACA,cACA,cCXgB,CDlEnB,cAmFG,iBAAY,CAnFf,oBAwFI,kBAAY,CAxFhB,YG0D8C,sBAAA,uBHqC5C,eACA,wBC6GgB,CD7MlB,qBGqE6C,gBAAA,mBACC,sBAAA,uBH+B3C,kBACA,gBACA,0BACA,4BCoGa,CD5MhB,oBA4GG,kBACA,SACA,OAAO,CA9GV,wBAoHI,SAAS,CApHb,yBGqE6C,gBAAA,mBACC,sBAAA,uBHoD1C,kBACA,4BAAkB,CA3HtB,WAmIE,oBAAA,qBAIA,iBAAY,CAvId,mBA0IG,oBE0EM,CFpNT,kBA8IG,kBACA,iBACA,kBACA,wBC4De,CD7MlB,uBAoJI,kBACA,QAAW,SACX,uCAAA,AACA,mCADA,AACA,+BAAA,sBACA,sCACA,eEzIQ,CFhBZ,iBGuiBC,eACA,mBACA,gBACA,uBH3YE,mBACA,aAAa,CAhKhB,UAuKE,cACA,YACA,kBACA,yBACA,qBCiCc,CD5MhB,SA+KE,oBE/JU,CCeX,0CH/BD,SAkLG,kBElKS,CAAA,CAAA","file":"styleguide.css","sourcesContent":["@import 'variables';\n@import 'utility/mixins';\n\n// variables\n\n$c--bg: $c--grey-x-light;\n$c--border: $c--grey-light;\n\n.sg {\n\n\t// layout\n\n\t&-nav {\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tz-index: 2;\n\t\ttransition: .2s transform $ease--out-quad;\n\t\twill-change: transform;\n\n\t\t&::after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 100%;\n\t\t\twidth: $spacing-unit;\n\t\t\theight: 100%;\n\t\t\tbackground: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z'/%3E%3C/svg%3E\") center no-repeat;\n\t\t\topacity: 1 - (lightness($c--border) / 100%);\n\t\t}\n\n\t\t&__inner {\n\t\t\tpadding: $spacing-unit;\n\t\t\tborder: solid $c--border;\n\t\t\tborder-width: 0 0 1px 0;\n\t\t\tbackground-color: $c--bg;\n\t\t}\n\n\t\tul ul {\n\t\t\tpadding-left: $spacing-unit--x-small;\n\t\t}\n\n\t\t@include mq('tablet-wide') {\n\t\t\tposition: fixed;\n\t\t\ttop: 0;\n\t\t\tright: 100%;\n\t\t\twidth: 20rem;\n\t\t\theight: 100vh;\n\t\t\toverflow: visible;\n\n\t\t\t&__inner {\n\t\t\t\theight: 100%;\n\t\t\t\toverflow-y: auto;\n\t\t\t\tborder-width: 0 1px 0 0;\n\t\t\t}\n\n\t\t\t&:hover {\n\t\t\t\ttransform: translateX(100%);\n\t\t\t}\n\t\t}\n\t}\n\n\t&-main {\n\t\tposition: relative;\n\t\tz-index: 1;\n\n\t\t&__inner {\n\t\t\t@include soft--ends($rel-spacing-unit);\n\t\t\t@include soft--sides($spacing-unit);\n\t\t}\n\t}\n\n\t// components\n\n\t&-component {\n\t\tmargin-top: $rel-spacing-unit;\n\n\t\t> h1,\n\t\t> h2,\n\t\t> h3,\n\t\t> h4,\n\t\t> h5,\n\t\t> h6 {\n\t\t\tfont-family: $stack--heading;\n\t\t\tfont-weight: $w--bold;\n\t\t\tline-height: 1;\n\t\t\tmargin-top: $rel-spacing-unit;\n\t\t}\n\t}\n\n\t&-heading {\n\t\ta {\n\t\t\tvisibility: hidden;\n\t\t}\n\n\t\t&:hover {\n\t\t\ta {\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\t\t}\n\t}\n\n\t&-example {\n\t\t@include push--sides(n($spacing-unit));\n\t\tmargin-top: $rel-spacing-unit;\n\t\tbackground-color: $c--bg;\n\n\t\t&__preview {\n\t\t\t@include soft--ends($rel-spacing-unit);\n\t\t\t@include soft--sides($spacing-unit);\n\t\t\tposition: relative;\n\t\t\toverflow: hidden;\n\t\t\tborder-top: 1px solid $c--border;\n\t\t\tborder-bottom: 1px solid $c--border;\n\t\t}\n\n\t\t&__button {\n\t\t\tposition: absolute;\n\t\t\tbottom: 0;\n\t\t\tright: 0;\n\t\t}\n\n\t\t&__source {\n\n\t\t\tpre {\n\t\t\t\tpadding: 0;\n\t\t\t}\n\n\t\t\tcode {\n\t\t\t\t@include soft--ends($rel-spacing-unit);\n\t\t\t\t@include soft--sides($spacing-unit);\n\t\t\t\tfont-size: rem(14px);\n\t\t\t\tbackground-color: transparent;\n\t\t\t}\n\t\t}\n\t}\n\n\t// foundation\n\n\t&-colour {\n\t\tpadding: {\n\t\t\ttop: $grid-column-gutter;\n\t\t\tleft: $grid-column-gutter;\n\t\t}\n\t\ttext-align: center;\n\n\t\t&-wrapper {\n\t\t\tmargin-left: n($grid-column-gutter);\n\t\t}\n\n\t\t&__value {\n\t\t\tposition: relative;\n\t\t\tpadding-top: 100%;\n\t\t\tborder-radius: 50%;\n\t\t\tbackground-color: $c--bg;\n\n\t\t\tspan {\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 50%; left: 50%;\n\t\t\t\ttransform: translate(-50%, -50%);\n\t\t\t\tfont-family: monospace;\n\t\t\t\tbackground-color: rgba($c--white, .6);\n\t\t\t\tpadding: $spacing-unit--x-small;\n\t\t\t}\n\t\t}\n\n\t\t&__name {\n\t\t\t@include truncate(100%);\n\t\t\tmargin-top: $spacing-unit--x-small;\n\t\t\tline-height: 1;\n\t\t}\n\t}\n\n\t// helpers\n\n\t&-panel {\n\t\tdisplay: block;\n\t\tpadding: $rel-spacing-unit;\n\t\ttext-align: center;\n\t\tbackground-color: $c--bg;\n\t\tborder: 1px solid $c--border;\n\t}\n\n\t&-push {\n\t\tpadding-top: $spacing-unit;\n\n\t\t@include mq(rem(800px), $property: height) {\n\t\t\tpadding-top: $spacing-unit--large;\n\t\t}\n\t}\n}\n","@import 'settings';\n@import 'utility/functions';\n@import '../variables.json';\n\n\n/*\n\n\tTypography\n\n*/\n\n// font stacks\n// for embedded custom fonts, list name below as normal. To generate code see example in utlity/core.scss\n\n$stack: Helvetica, Arial, sans-serif;\n$stack--heading: $stack;\n\n\n// font sizes\n\n$h--xxx-small: rem(16px);\n$h--xx-small: rem(18px);\n$h--x-small: rem(20px);\n$h--small: rem(22px);\n$h--medium: rem(24px);\n$h--large: rem(28px);\n$h--x-large: rem(36px);\n$h--xx-large: rem(48px);\n$h--xxx-large: rem(64px);\n\n$p: rem(16px);\n$p--small: rem(12px);\n$p--medium: rem(18px);\n$p--large: rem(24px);\n\n// line-height ratios\n\n$lh: 1.5;\n$lh--x-small: 1.1;\n$lh--small: 1.25;\n$lh--large: 1.75;\n\n\n// letter spacing\n\n$ls: (\n\tbase: -30\n);\n\n\n// weights\n\n// $w--light: 300;\n$w--normal: 400;\n// $w--semibold: 600;\n$w--bold: 700;\n// $w--heavy: 800;\n\n\n\n/*\n\n\tLayout\n\n*/\n\n// basic spacing units\n\n$spacing-unit: rem(30px);\n$spacing-unit--x-small: rem(10px);\n$spacing-unit--small: rem(20px);\n$spacing-unit--large: rem(40px);\n$spacing-unit--x-large: rem(60px);\n\n$rel-spacing-unit: 1em;\n$rel-spacing-unit--small: .5em;\n\n\n// page gutter\n\n$page-gutter: $spacing-unit--small;\n$page-gutter--tablet: $spacing-unit;\n$page-gutter--desktop: $spacing-unit--large;\n\n\n// grid\n\n$grid-column-count: 24;\n$grid-column-gutter: $spacing-unit--small;\n$grid-column-gutter--tablet: $spacing-unit;\n$grid-column-gutter--desktop: $spacing-unit--large;\n\n\n// media queries and breakpoints\n// build mobile first 300+\n\n$breakpoints--rem: $breakpoints;\n\n@each $name, $width in $breakpoints {\n\t$breakpoints--rem: map-merge($breakpoints--rem, ($name: rem($width * 1px)));\n}\n\n@each $name, $width in $breakpoints {\n\t$breakpoints: map-merge($breakpoints, ($name: em($width * 1px, $browser-default-font-size)));\n}\n\n\n// once dev mode is false, you must define any block grids, column grids and flush margins for each breakpoint\n// this is to keep unused code to a minimum\n\n$grid-bp: (\n\t'base': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'phone': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'phone-wide': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'phablet': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'tablet-small': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'tablet': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'tablet-wide': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'desktop': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t),\n\t'desktop-wide': (\n\t\t'width': (),\n\t\t'push': (),\n\t\t'pull': (),\n\t\t'block': (),\n\t\t'flush': ()\n\t)\n);\n\n$max-width: breakpoint('desktop', true);\n\n\n// z-indexing\n\n/*\nordered from high to low\nsuggested naming convention would be the class/ID the z-index is going on\n*/\n\n$z-indexes: (\n\t'outdated-browser',\n\t'site-header',\n\t'site-content',\n\t'site-footer'\n);\n\n\n\n/*\n\n\tColours\n\n*/\n\n// brand colours\n\n$c--brand-primary: #fdbc00;\n$c--brand-secondary: #e74c3c;\n\n\n// greyscale\n\n$c--black: #1a1a1a;\n$c--grey-dark: #444;\n$c--grey: #888;\n$c--grey-light: #ddd;\n$c--grey-x-light: #fafafa;\n$c--white: #fff;\n\n\n// other colours\n\n$c--red: #f50023;\n$c--green: #24b35d;\n$c--blue: #4D90FE;\n\n\n// social colours\n\n$c--twitter: #55acee;\n$c--facebook: #3b5998;\n$c--youtube: #bb0000;\n$c--pinterest: #cb2027;\n$c--linkedin: #007bb5;\n$c--instagram: #8a3ab9; // new purple colour\n// $c--instagram: #125688; // old blue colour\n\n\n// form & message positive/negative colours\n\n$c--positive: $c--green;\n$c--negative: $c--red;\n\n\n// top level element colours\n\n$c--body-bg: $c--white;\n$c--body-colour: $c--black;\n\n\n// colour map (only use colours from the styleguide)\n// used for when looping through panel/theme styles\n\n$colours: (\n\t// primary colours\n\t'yellow': (\n\t\t'base': $c--brand-primary\n\t),\n\t'green': (\n\t\t'base': $c--green\n\t),\n\t'red': (\n\t\t'base': $c--red\n\t),\n\t'blue': (\n\t\t'base': $c--blue\n\t),\n\t// greyscale\n\t'black': (\n\t\t'base': $c--black\n\t),\n\t'grey': (\n\t\t'base': $c--grey\n\t),\n\t'grey-dark': (\n\t\t'base': $c--grey-dark\n\t),\n\t'grey-light': (\n\t\t'base': $c--grey-light\n\t),\n\t'grey-off-white': (\n\t\t'base': $c--grey-x-light\n\t),\n\t'white': (\n\t\t'base': $c--white\n\t)\n);\n\n\n\n/*\n\n\tEasing/Timing\n\n*/\n\n//\tCubic\n$ease--in-cubic: cubic-bezier(.55,.055,.675,.19);\n$ease--out-cubic: cubic-bezier(.215,.61,.355,1);\n$ease--in-out-cubic: cubic-bezier(.645,.045,.355,1);\n\n//\tCirc\n$ease--in-circ: cubic-bezier(.6,.04,.98,.335);\n$ease--out-circ: cubic-bezier(.075,.82,.165,1);\n$ease--in-out-circ: cubic-bezier(.785,.135,.15,.86);\n\n//\tExpo\n$ease--in-expo: cubic-bezier(.95,.05,.795,.035);\n$ease--out-expo: cubic-bezier(.19,1,.22,1);\n$ease--in-out-expo: cubic-bezier(1,0,0,1);\n\n//\tQuad\n$ease--in-quad: cubic-bezier(.55,.085,.68,.53);\n$ease--out-quad: cubic-bezier(.25,.46,.450,.94);\n$ease--in-out-quad: cubic-bezier(.455,.03,.515,.955);\n\n//\tQuart\n$ease--in-quart: cubic-bezier(.895,.03,.685,.22);\n$ease--out-quart: cubic-bezier(.165,.84,.44,1);\n$ease--in-out-quart: cubic-bezier(.77,0,.175,1);\n\n//\tQuint\n$ease--in-quint: cubic-bezier(.755,.05,.855,.06);\n$ease--out-quint: cubic-bezier(.23,1,.320,1);\n$ease--in-out-quint: cubic-bezier(.86,0,.07,1);\n\n//\tSine\n$ease--in-sine: cubic-bezier(.47,0,.745,.715);\n$ease--out-sine: cubic-bezier(.39,.575,.565,1);\n$ease--in-out-sine: cubic-bezier(.445,.05,.55,.95);\n\n//\tBack\n$ease--in-back: cubic-bezier(.6,-.28,.735,.045);\n$ease--out-back: cubic-bezier(.175,.885,.32,1.275);\n$ease--in-out-back: cubic-bezier(.68,-0.55,.265,1.55);\n\n//\tSmooth fade\n$ease--smooth-fade: cubic-bezier(.365,.005,.355,1);\n","$browser-default-font-size: 16px !default;\n\n/*\n\n\tREMs\n\n*/\n\n$rems-on: true !default;\n$rems-base-font-size: $browser-default-font-size / 100% * $html-font-size !default;\n\n@function rem($size, $reverse: false) {\n\n\t$html-font-size-units: if(str-index(#{$html-font-size}, px), px, %);\n\n\t$unitless: strip-unit($size);\n\t$unitless-base: strip-unit(if($html-font-size-units == px, $html-font-size, $rems-base-font-size));\n\n\t@if $reverse == false {\n\n\t\t@if $rems-on {\n\n\t\t\t@if str-index(#{$size}, 'px') {\n\n\t\t\t\t@return $unitless / $unitless-base * 1rem;\n\n\t\t\t} @elseif str-index(#{$size}, 'rem') {\n\n\t\t\t\t@return $size;\n\n\t\t\t}\n\n\t\t} @else {\n\n\t\t\t@if str-index(#{$size}, 'px') {\n\n\t\t\t\t@return $size;\n\n\t\t\t} @elseif str-index(#{$size}, 'rem') {\n\n\t\t\t\t@return $unitless * $unitless-base * 1px;\n\n\t\t\t}\n\n\t\t}\n\n\t} @else {\n\n\t\t@return $unitless * $unitless-base * 1px;\n\n\t}\n\n}\n\n\n\n/*\n\n\tEMs calculator\n\n*/\n\n$em-media-queries: true !default;\n\n@function em($size, $base: $p) {\n\n\t$size: if(str-index(#{$size}, 'rem'), rem($size, true), $size);\n\t$base: if(unit($base) == rem, rem($base, true), $base);\n\n\t$unitless: strip-unit($size);\n\t$unitless-base: strip-unit($base);\n\n\t@if $em-media-queries {\n\n\t\t@return $unitless / $unitless-base * 1em;\n\n\t} @else {\n\n\t\t@return $size;\n\n\t}\n\n}\n\n\n/*\n\n\tGrids\n\n*/\n\n@function grid-calc($index, $total: $grid-column-count) {\n\t@if $index == 0 {\n\t\t@return 0%;\n\t} @else {\n\t\t@return 100%/($total/$index);\n\t}\n}\n\n\n\n/*\n\n\tZ-indexing\n\n\tuse:\n\n\t\tinstead of guessing or adding random z-indexes throughout the project (e.g. 100000, 999999, etc.), call the z-index function to generate a z-index from a stacked list of classes\n\n\tprerequisits:\n\n\t\t$z-indexes list must exist in variables file\n\n\texample:\n\n\t\t.box {\n\t\t\tz-index: z('box');\n\t\t}\n\n*/\n\n@function z($name) {\n\n\t@if index($z-indexes, $name) {\n\n\t\t@return (length($z-indexes) - index($z-indexes, $name)) + 1;\n\n\t} @else {\n\n\t\t@warn 'There is no item \"#{$name}\" in this list; choose one of: #{$z-indexes}';\n\n\t\t@return null;\n\n\t}\n\n}\n\n\n\n/*\n\n\tPhotoshop letter spacing\n\n\tuse:\n\n\t\tfor simple conversion between Photoshop letter-spacing to ems\n\n\tprerequisits:\n\n\t\t$ls list must exist in variables file\n\n\texample:\n\n\t\t.awesome-heading {\n\t\t\tletter-spacing: ls('awesome-heading');\n\t\t}\n\n\t\tcould generate (if \"awesome-heading\") is 2nd in the list:\n\n\t\t.awesome-heading {\n\t\t\tletter-spacing: -0.01em;\n\t\t}\n\n*/\n\n@function ls($name) {\n\t$value: map_get($ls, $name);\n\t@return $value / 1000 * 1em;\n}\n\n@function ls-basic($value) {\n\t@return $value / 1000 * 1em;\n}\n\n\n\n/*\n\n\tMap deep get\n\n\tGet values from anywhere in a variable list\n\n\thttp://css-tricks.com/snippets/sass/deep-getset-maps/\n\n*/\n\n@function map-deep-get($map, $keys...) {\n    @each $key in $keys {\n        $map: map-get($map, $key);\n    }\n    @return $map;\n}\n\n\n/*\n\n\tStrip unit\n\n*/\n\n@function strip-unit($number) {\n\t@if type-of($number) == 'number' and not unitless($number) {\n\t\t@return $number / ($number * 0 + 1);\n\t}\n\n\t@return $number;\n}\n\n\n/*\n\n\tVery simple number functions\n\n*/\n\n@function h($num) {\n\t@return $num / 2;\n}\n\n@function n($num) {\n\t@return 0 - $num;\n}\n\n@function hn($num) {\n\t@return n(h($num));\n}\n\n\n/*\n\n\tPhotoshop letter spacing\n\n\tuse:\n\n\t\tget the value of a particular breakpoint\n\n\texample:\n\n\t\t.box {\n\t\t\twidth: breakpoint('phone-wide');\n\t\t}\n\n\t\twould generate:\n\n\t\t.box {\n\t\t\twidth: 480px;\n\t\t}\n\n*/\n\n@function breakpoint($name, $rems: false) {\n\t@if $rems {\n\t\t@return map_get($breakpoints--rem, $name);\n\t} @else {\n\t\t@return map_get($breakpoints, $name);\n\t}\n}\n\n\n/*\n\n\tColour map lookup, retrieving base value by default\n\n*/\n\n@function c($colour, $value: 'base') {\n\n\t@if map-has-key($colours, $colour) {\n\n\t\t$colour: map-get($colours, $colour);\n\t\t$colourVal: map-get($colour, $value);\n\t\t@return $colourVal;\n\n\t} @else {\n\n\t\t@warn 'Colour name #{$colour} not found in $colours.';\n\n\t}\n\n}\n\n\n/*\n\n\tSVG inliner\n\n*/\n\n@function svg-url($svg){\n    //\n    //  Add missing namespace\n    //\n    @if not str-index($svg,xmlns) {\n        $svg: str-replace($svg, '<svg','<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n    //\n    //  Chunk up string in order to avoid\n    //  \"stack level too deep\" error\n    //\n    $encoded:'';\n    $slice: 2000;\n    $index: 0;\n    $loops: ceil(str-length($svg)/$slice);\n    @for $i from 1 through $loops {\n        $chunk: str-slice($svg, $index, $index + $slice - 1);\n        //\n        //   Encode\n        //\n        $chunk: str-replace($chunk, '\"', '\\'');\n        $chunk: str-replace($chunk, '%', '%25');\n        $chunk: str-replace($chunk, '#', '%23');\n        $chunk: str-replace($chunk, '{', '%7B');\n        $chunk: str-replace($chunk, '}', '%7D');\n        $chunk: str-replace($chunk, '<', '%3C');\n        $chunk: str-replace($chunk, '>', '%3E');\n\n        //\n        //    The maybe list\n        //\n        //    Keep size and compile time down\n        //    ... only add on documented fail\n        //\n        //  $chunk: str-replace($chunk, '&', '%26');\n        //  $chunk: str-replace($chunk, '|', '%7C');\n        //  $chunk: str-replace($chunk, '[', '%5B');\n        //  $chunk: str-replace($chunk, ']', '%5D');\n        //  $chunk: str-replace($chunk, '^', '%5E');\n        //  $chunk: str-replace($chunk, '`', '%60');\n        //  $chunk: str-replace($chunk, ';', '%3B');\n        //  $chunk: str-replace($chunk, '?', '%3F');\n        //  $chunk: str-replace($chunk, ':', '%3A');\n        //  $chunk: str-replace($chunk, '@', '%40');\n        //  $chunk: str-replace($chunk, '=', '%3D');\n\n        $encoded: #{$encoded}#{$chunk};\n        $index: $index + $slice;\n    }\n    @return url(\"data:image/svg+xml,#{$encoded}\");\n}\n\n//  Helper function to replace characters in a string\n@function str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n    @return if($index,\n        str-slice($string, 1, $index - 1) + $replace +\n        str-replace(str-slice($string, $index +\n        str-length($search)), $search, $replace),\n        $string);\n}\n","/*\n\n\tMedia Queries\n\n\tused for outputting content either between media query tags\n\n\texample: basic usage\n\n\t.element {\n\t\twidth: 50%;\n\n\t\t@include mq('tablet-small') {\n\t\t\twidth: 20%;\n\t\t}\n\t}\n\n\texample: using max-width\n\n\t.element {\n\t\twidth: 50%;\n\n\t\t@include mq('tablet-small', 'max') {\n\t\t\twidth: 20%;\n\t\t}\n\t}\n\n*/\n\n@mixin mq($size, $type: min, $property: width) {\n\n\t@if map_has_key($breakpoints, $size) {\n\t\t$size: map_get($breakpoints, $size);\n\t}\n\n\t@if $type == max {\n\t\t$negative: if($em-media-queries, 0.01em, 1px);\n\t\t$size: $size - $negative;\n\t}\n\n\t@media only screen and (#{$type}-#{$property}: $size) {\n\t\t@content;\n\t}\n\n}\n\n\n\n/*\n\n\tMargin / Padding Quick Resets\n\n\texample: top & bottom margin set to $spacing-unit\n\t.element {\n\t\t@include push--ends;\n\t}\n\n\texample: left & right padding set to $spacing-unit--small\n\t.element {\n\t\t@include soft--sides($spacing-unit--small);\n\t}\n\n*/\n\n// add/remove margins\n\n@mixin push--ends($spacing: $spacing-unit) { margin: { top: $spacing; bottom: $spacing; } }\n@mixin push--sides($spacing: $spacing-unit) { margin: { left: $spacing; right: $spacing; } }\n\n@mixin push--auto { margin: { left: auto; right: auto; } }\n@mixin offset--sides($spacing: $spacing-unit) { margin: { left: -$spacing; right: -$spacing; } }\n\n@mixin flush--ends { margin: { top: 0; bottom: 0; } }\n@mixin flush--sides { margin: { left: 0; right: 0; } }\n\n\n// add/remove paddings\n\n@mixin soft--ends($spacing: $spacing-unit) { padding: { top: $spacing; bottom: $spacing; } }\n@mixin soft--sides($spacing: $spacing-unit) { padding: { left: $spacing; right: $spacing; } }\n\n@mixin hard--ends { padding: { top: 0; bottom: 0; } }\n@mixin hard--sides { padding: { left: 0; right: 0; } }\n\n\n\n/*\n\n\tHelper mixins\n\n*/\n\n// Contain floats / clearfix\n\n@mixin cf {\n\n\t&::after {\n\t\tcontent: '';\n\t\tdisplay: table;\n\t\tclear: both;\n\t}\n}\n\n\n// Hide from both screenreaders and browsers\n\n@mixin hidden {\n\tdisplay: none;\n\tvisibility: hidden;\n}\n\n@mixin visible($state: 'block') {\n\tdisplay: unquote($state);\n\tvisibility: visible;\n}\n\n\n// Hide only visually, but have it available for screenreaders\n\n@mixin vh($focusable: false) {\n\tborder: 0;\n\tclip: rect(0 0 0 0);\n\theight: 1px;\n\tmargin: -1px;\n\toverflow: hidden;\n\tpadding: 0;\n\tposition: absolute;\n\twidth: 1px;\n\n\t@if $focusable {\n\t\t@include vh-focusable;\n\t}\n}\n\n@mixin vh-reset {\n\tclip: auto;\n\theight: auto;\n\tmargin: 0;\n\toverflow: visible;\n\tposition: static;\n\twidth: auto;\n}\n\n\n// Allow the element to be focusable when navigated to via the keyboard\n\n@mixin vh-focusable {\n\n\t&:active,\n\t&:focus {\n\t\tclip: auto;\n\t\theight: auto;\n\t\tmargin: 0;\n\t\toverflow: visible;\n\t\tposition: static;\n\t\twidth: auto;\n\t}\n}\n\n\n// Hide visually and from screenreaders, but maintain layout\n\n@mixin invisible {\n\tvisibility: hidden;\n}\n\n\n\n/*\n\n\tForm input placeholder text\n\n\texample:\n\n\tinput,\n\ttextarea {\n\t\t@include input-placeholder {\n\t\t\tcolor: $grey;\n\t\t}\n\t}\n\n*/\n\n@mixin input-placeholder {\n\t&.placeholder { @content; }\n\t&:-moz-placeholder { @content; }\n\t&::-moz-placeholder { @content; }\n\t&:-ms-input-placeholder { @content; }\n\t&::-webkit-input-placeholder { @content; }\n}\n\n\n\n/*\n\n\tRetina images\n\n\texample:\n\n\t.element {\n\t\t@include retina {\n\t\t\tbackground-image: url(../img/background@2x.png);\n\t\t}\n\t}\n\n*/\n\n@mixin retina {\n\t@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n\tonly screen and (-moz-min-device-pixel-ratio: 1.5),\n\tonly screen and (-o-min-device-pixel-ratio: 3 / 2),\n\tonly screen and (min-device-pixel-ratio: 1.5),\n\tonly screen and (min-resolution: 1.5dppx) {\n\t\t@content;\n\t}\n}\n\n\n\n/*\n\n\tContent margins\n\n\tfore removing first/last child margins\n\n\texample: default\n\t.element {\n\t\t@include content-margins;\n\t}\n\n\toutput:\n\t.element > *:first-child {\n\t\tmargin-top: 0;\n\t}\n\t.element > *:last-child {\n\t\tmargin-bottom: 0;\n\t}\n\n\texample: empty selector\n\t.element {\n\t\t@include content-margins('false');\n\t}\n\n\toutput:\n\t.element:first-child {\n\t\tmargin-top: 0;\n\t}\n\t.element:last-child {\n\t\tmargin-bottom: 0;\n\t}\n\n*/\n\n\n@mixin content-margins($selector: '> *', $last-child: false) {\n\t@if not $selector {\n\t\t$selector: '&';\n\t}\n\n\t#{unquote($selector)} {\n\t\t&:first-child { margin-top: 0; }\n\t\t@if $last-child {\n\t\t\t&:last-child { margin-bottom: 0; }\n\t\t}\n\t}\n}\n\n\n\n/*\n\n\tCSS Triangle\n\n\tused for creating CSS only triangles\n\n\texample:\n\t.element {\n\n\t\t&::before {\n\t\t\t@include css-triangle(blue, down);\n\t\t}\n\t}\n\n*/\n\n@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){\n\t@include pseudo($pos: $position);\n\twidth: 0;\n\theight: 0;\n\n\t@if $round {\n\t\tborder-radius: 3px;\n\t}\n\n\t@if $direction == down {\n\t\tborder-left: $size solid transparent;\n\t\tborder-right: $size solid transparent;\n\t\tborder-top: $size solid $color;\n\t\tmargin-top: 0 - round( $size / 2.5 );\n\t} @else if $direction == up {\n\t\tborder-left: $size solid transparent;\n\t\tborder-right: $size solid transparent;\n\t\tborder-bottom: $size solid $color;\n\t\tmargin-bottom: 0 - round( $size / 2.5 );\n\t} @else if $direction == right {\n\t\tborder-top: $size solid transparent;\n\t\tborder-bottom: $size solid transparent;\n\t\tborder-left: $size solid $color;\n\t\tmargin-right: -$size;\n\t} @else if  $direction == left {\n\t\tborder-top: $size solid transparent;\n\t\tborder-bottom: $size solid transparent;\n\t\tborder-right: $size solid $color;\n\t\tmargin-left: -$size;\n\t}\n}\n\n\n\n/*\n\n\tHide text\n\n\texample:\n\n\t.element {\n\t\t@include hide-text;\n\t}\n\n*/\n\n@mixin hide-text($break: false, $indent: 200%, $align: left, $overflow: hidden) {\n\t@if $break {\n\t\tposition: absolute;\n\t\ttop: 0; left: 0;\n\t\tpointer-events: none;\n\t}\n\ttext: {\n\t\tindent: $indent;\n\t\talign: $align;\n\t}\n\tfont-size: 0;\n\twhite-space: nowrap;\n\t@if $overflow {\n\t\toverflow: $overflow;\n\t}\n}\n\n\n\n/*\n\n\tResponsive ratio\n\n\tUsed for creating scalable elements that maintain the same ratio\n\n\texample:\n\t.element {\n\t\t@include responsive-ratio(400, 300);\n\t}\n\n*/\n\n@mixin responsive-ratio($x,$y, $pseudo: false) {\n\t$padding: unquote( ( $y / $x ) * 100 + '%' );\n\n\t@if $pseudo {\n\t\t&::before {\n\t\t\t@include pseudo($pos: relative);\n\t\t\twidth: 100%;\n\t\t\tpadding-top: $padding;\n\t\t}\n\t} @else {\n\t\tpadding-top: $padding;\n\t}\n}\n\n\n\n/*\n\n\tTypography\n\n\tText image replacement, with responsive ratio\n\n\tHTML:\n\n\t<h1 class=\"element\">\n\t\t<span>Text to replace</span>\n\t</h1>\n\n\texample:\n\t.element {\n\t\t@include typography(200, 50, 'hello-world');\n\t}\n\n\n*/\n\n@mixin typography($w, $h, $file, $type: png, $overflow: hidden) {\n\t@include responsive-ratio($w, $h, true);\n\tposition: relative;\n\tmax-width: $w * 1px;\n\tbackground: url('/assets/img/typography/#{$file}.#{$type}') 50% 50% no-repeat;\n\tbackground-size: contain;\n\n\tspan {\n\t\t@include hide-text(true, $overflow: $overflow);\n\t}\n}\n\n\n\n/*\n\n\tIcon\n\n\tFor using fontastic icons in pseudo elements\n\n*/\n\n@mixin icon-css($content: false) {\n\t@if $content {\n\t\tcontent: '#{$content}';\n\t}\n\tdisplay: block;\n\tfont-family: 'icon-font-family' !important;\n\tfont-style: normal !important;\n\tfont-weight: normal !important;\n\tfont-variant: normal !important;\n\ttext-transform: none !important;\n\tspeak: none;\n\tline-height: 1;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\n\n\n/*\n\n\tColours\n\n\tbackground, colour, etc. match up with colour map in _variables.scss\n\n\tmodify to suit per project\n\n*/\n\n@mixin colours(\n\t$selector: false,\n\t$chain: '&--',\n\t$background: 'base',\n\t$border: true\n) {\n\n\t@each $name, $values in $colours {\n\t\t#{$chain}#{$name} {\n\n\t\t\t@if $selector {\n\n\t\t\t\t#{$selector} {\n\t\t\t\t\t@if $background {\n\t\t\t\t\t\tbackground-color: map-get($values, $background);\n\t\t\t\t\t\t@if $border {\n\t\t\t\t\t\t\tborder-color: darken(map-get($values, $background), 20%);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} @else {\n\n\t\t\t\t@if $background {\n\t\t\t\t\tbackground-color: map-get($values, $background);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n\n\n\n/*\n\n\tMisc\n\n*/\n\n@mixin align($vertical: true, $horizontal: false, $position: relative) {\n\t@if $position {\n\t\tposition: $position;\n\t}\n\t@if $vertical {\n\t\ttop: 50%;\n\t}\n\t@if $horizontal {\n\t\tleft: 50%;\n\t}\n\n\t@if $vertical and $horizontal {\n\t\ttransform: translateX(-50%) translateY(-50%);\n\t} @else if $vertical {\n\t\ttransform: translateY(-50%);\n\t} @else {\n\t\ttransform: translateX(-50%);\n\t}\n}\n\n@mixin antialias {\n\tfont-smoothing: antialiased;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\n\n@mixin appearance($val: none) {\n\t-webkit-appearance: $val;\n\t-moz-appearance: $val;\n\tappearance: $val;\n}\n\n\n@mixin hardware($backface: true, $perspective: 1000) {\n\n\t@if $backface {\n\t\tbackface-visibility: hidden;\n\t}\n\n\tperspective: $perspective;\n}\n\n\n@mixin pos($pos, $t, $r, $b, $l, $z: false, $hardware: true) {\n\t@if $pos == fixed and $hardware { @include hardware; }\n\t@if $pos { position: $pos; }\n\t@if $t { top: $t; }\n\t@if $r { right: $r; }\n\t@if $b { bottom: $b; }\n\t@if $l { left: $l; }\n\t@if $z { z-index: $z; }\n}\n\n\n@mixin pseudo($display: block, $pos: absolute, $content: ''){\n\tcontent: $content;\n\tdisplay: $display;\n\tposition: $pos;\n}\n\n\n@mixin selection {\n\t::-moz-selection { @content; }\n\t::selection { @content; }\n}\n\n\n@mixin truncate($truncation-boundary) {\n\tmax-width: $truncation-boundary;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n}\n\n\n@mixin unlist($margin: true, $padding: true) {\n\t@if $margin {\n\t\t@if $margin == 'vertical' {\n\t\t\t@include flush--ends;\n\t\t} @elseif $margin == 'horizontal' {\n\t\t\t@include flush--sides;\n\t\t} @else {\n\t\t\tmargin: 0;\n\t\t}\n\t}\n\t@if $padding {\n\t\tpadding: 0;\n\t}\n\tlist-style: none;\n}\n\n\n@mixin unselectable {\n\t-webkit-touch-callout: none;\n\tuser-select: none;\n}\n\n\n/*\n\n\tFluid Property\n\n\thttp://www.adrenalinmedia.com.au/the-agency/insights/this-changes-everything-css-fluid-properties.aspx\n\n\tHTML:\n\n\t<h1 class=\"element\">\n\t\t<span>Text to replace</span>\n\t</h1>\n\n\texample:\n\th1 {\n\t\t@include fp(font-size, 50, 100); // 50px at 320, 100px at 1920;\n\t}\n\n\toutput:\n\th1 {\n\t\tfont-size: calc(3.125vw + 40px); //This is the magic!\n\t}\n\n\t@media (max-width:320px){ //Clips the start to the min value\n\t\tfont-size:50px;\n\t}\n\n\t@media (min-width:1920px){ //Clips the end to the max value\n\t\tfont-size:100px;\n\t}\n\n\n*/\n\n@mixin fp($property, $min, $max, $start: 320, $end: breakpoint('desktop'), $clip: true, $clipAtStart: true, $clipAtEnd: true) {\n\t$start: $start / ($start * 0 + 1);\n\t$end: $end / ($end * 0 + 1);\n\t$multiplier: ($max - $min) / ($end - $start) * 100;\n\t$adder: ($min * $end - $max * $start) / ($end - $start);\n\t$formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});\n\t@if $clip and $clipAtStart {\n\t\t@media (max-width: #{$start + 0px}) {\n\t\t\t#{$property}: $min + 0px;\n\t\t}\n\t}\n\t@if $clip and $clipAtEnd {\n\t\t@media (min-width: #{$end + 0px}) {\n\t\t\t#{$property}: $max + 0px;\n\t\t}\n\t}\n\t#{$property}: $formula;\n}"]}