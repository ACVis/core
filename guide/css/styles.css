/*--------------------------------

	Default colour variable fallbacks

*/
/*--------------------------------

	Development mode

	if development mode is set to true, then the following things apply:

	When a site is ready to go live, change it to false, and make sure you
	populate any relevant variables such as the grid classes

*/
/*--------------------------------

	Typography

*/
/*--------------------------------

	Layout

*/
/*

use:

	get the value of a particular breakpoint

example:

	.box {
		width: breakpoint("phone-wide");
	}

	would generate:

	.box {
		width: 480px;
	}

*/
/*
ordered from high to low
suggested naming convention would be the class/ID the z-index is going on
*/
/*--------------------------------

	Colours

*/
/*--------------------------------

	Easing/Timing

*/
/*--------------------------------

	Media Queries

	used for outputting content either between media query tags, or without (for fixed-width.scss)

	example: basic usage

	.element {
		width: 50%;

		@include mq("tablet-small") {
			width: 20%;
		}
	}

	example: using max-width

	.element {
		width: 50%;

		@include mq("tablet-small", "max") {
			width: 20%;
		}
	}

*/
/*--------------------------------

	Margin / Padding Quick Resets

	example: top margin
	.element {
		@include push--top($base-spacing-unit);
	}

	example: top & bottom margin
	.element {
		@include push--ends($base-spacing-unit);
	}

	example: left & right margin
	.element {
		@include push--sides($base-spacing-unit);
	}

	example: remove a top margin
	.element {
		@include flush--top;
	}

*/
/*--------------------------------

	LT IE9

	to be used in conjunction with fixed-width.scss

*/
/*--------------------------------

	Helper mixins

*/
/*--------------------------------

	Form input placeholder text

	example:

	input,
	textarea {
		@include input-placeholder {
			color: $grey;
		}
	}

*/
/*--------------------------------

	Retina images

	example:

	.element {
		@include retina {
			background-image: url(../img/background@2x.png);
		}
	}

*/
/*--------------------------------

	Content margins

	fore removing first/last child margins

	example: default
	.element {
		@include content-margins;
	}

	output:
	.element > *:first-child {
		margin-top: 0;
	}
	.element > *:last-child {
		margin-bottom: 0;
	}

	example: empty selector
	.element {
		@include content-margins(false);
	}

	output:
	.element:first-child {
		margin-top: 0;
	}
	.element:last-child {
		margin-bottom: 0;
	}

*/
/*--------------------------------

	CSS Triangle

	used for creating CSS only triangles

	example:
	.element {

		&:before {
			@include css-triangle(blue, down);
		}
	}

*/
/*--------------------------------

	Hide text

	example:

	.element {
		@include hide-text;
	}

*/
/*--------------------------------

	Responsive ratio

	Used for creating scalable elements that maintain the same ratio

	example:
	.element {
		@include responsive-ratio(400, 300);
	}

*/
/*--------------------------------

	Typography

	Text image replacement, with responsive ratio

	HTML:

	<h1 class="element">
		<span>Text to replace</span>
	</h1>

	example:
	.element {
		@include typography(200, 50, 'hello-world');
	}


*/
/*--------------------------------

	Icon

	For using fontastic icons in pseudo elements

*/
/*--------------------------------

	Colours

	background, colour, etc. match up with colour map in _variables.scss

	modify to suit per project

*/
/*--------------------------------

	Misc

*/
.site-wrapper {
  padding: 5rem 0; }

.site-content {
  margin: 5rem 0; }

.component {
  margin-top: 4.8rem; }
  .component > *:first-child {
    margin-top: 0; }
  .component > *:last-child {
    margin-bottom: 0; }
  .component__header {
    border-bottom: 1px solid #ddd;
    padding-bottom: 2rem; }
  .component__content {
    margin-top: 3.6rem; }
    .component__content--spaced > *:first-child {
      margin-top: 0; }
    .component__content--spaced > *:last-child {
      margin-bottom: 0; }
    .component__content--spaced > * {
      margin-top: 3rem; }
  @media only screen and (min-width: 768px) {
    .component {
      margin-top: 7.2rem; } }

.colour-scheme {
  margin: 0;
  padding: 0;
  list-style: none; }
  .colour-scheme:after {
    content: "";
    display: table;
    clear: both; }
  .colour-scheme li {
    margin-top: 2rem;
    margin-bottom: 0;
    line-height: 10rem;
    padding-left: 11.5rem;
    position: relative;
    white-space: nowrap; }
    .colour-scheme li.yellow:before {
      background-color: #fdbc00;
      border-color: #977000; }
    .colour-scheme li.green:before {
      background-color: #24b35d;
      border-color: #135e31; }
    .colour-scheme li.red:before {
      background-color: #f50023;
      border-color: #8f0014; }
    .colour-scheme li.blue:before {
      background-color: #4D90FE;
      border-color: #0157e4; }
    .colour-scheme li.black:before {
      background-color: #1a1a1a;
      border-color: black; }
    .colour-scheme li.grey:before {
      background-color: #888;
      border-color: #555555; }
    .colour-scheme li.grey-dark:before {
      background-color: #444;
      border-color: #111111; }
    .colour-scheme li.grey-light:before {
      background-color: #ddd;
      border-color: #aaaaaa; }
    .colour-scheme li.grey-off-white:before {
      background-color: #F6F6F6;
      border-color: #c3c3c3; }
    .colour-scheme li.white:before {
      background-color: #fff;
      border-color: #cccccc; }
    .colour-scheme li > *:first-child {
      margin-top: 0; }
    .colour-scheme li > *:last-child {
      margin-bottom: 0; }
    .colour-scheme li:before {
      content: "";
      display: block;
      position: absolute;
      width: 10rem;
      height: 10rem;
      position: absolute;
      top: 0;
      left: 0;
      border: 1px solid; }
    @media only screen and (min-width: 480px) {
      .colour-scheme li {
        float: left;
        width: 50%; }
        .colour-scheme li:nth-child(-n+2) {
          margin-top: 0; } }
    @media only screen and (min-width: 1024px) {
      .colour-scheme li {
        width: 33.33333%; }
        .colour-scheme li:nth-child(-n+3) {
          margin-top: 0; } }
    @media only screen and (min-width: 1248px) {
      .colour-scheme li {
        width: 25%; }
        .colour-scheme li:nth-child(-n+4) {
          margin-top: 0; } }

.icon-list {
  margin: 0;
  padding: 0;
  list-style: none; }
  .icon-list:after {
    content: "";
    display: table;
    clear: both; }
  .icon-list > li {
    float: left;
    margin-right: 2.4rem;
    margin-bottom: 0; }

/*# sourceMappingURL=styles.css.map */